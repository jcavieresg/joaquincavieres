source("update_dates.R")
library(MASS)
library(plotly)
library(fields)
# Set up a grid
n <- 30
x <- seq(0, 1, length.out = n)
y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)
# Compute distance matrix
dists <- rdist(grid, grid)
# Define covariance function (exponential kernel)
sigma2 <- 1       # variance
range <- 0.2      # correlation range
cov_matrix <- sigma2 * exp(-dists / range)
# Simulate a Gaussian random field
set.seed(123)
z <- mvrnorm(1, mu = rep(0, nrow(grid)), Sigma = cov_matrix)
# Reshape for plotting
z_matrix <- matrix(z, nrow = n, byrow = TRUE)
# 3D Surface Plot using plotly
plot_ly(
x = x,
y = y,
z = ~z_matrix,
type = "surface",
colorscale = "Viridis"
) %>%
layout(
title = "Simulated Gaussian Random Field",
scene = list(
xaxis = list(title = "X"),
yaxis = list(title = "Y"),
zaxis = list(title = "Z")
)
library(MASS)
library(fields)
library(plot3D)
# Create grid
n <- 50
x <- seq(0, 1, length.out = n)
y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)
# Compute distance matrix
d <- rdist(grid, grid)
# Exponential covariance
sigma2 <- 1
range <- 0.2
cov_mat <- sigma2 * exp(-d / range)
# Simulate field
set.seed(42)
z <- mvrnorm(1, mu = rep(0, nrow(grid)), Sigma = cov_mat)
sim1 <- grf(100, cov.pars = c(1, .25))
library(geoR)
sim1 <- grf(100, cov.pars = c(1, .25))
# a display of simulated locations and values
points(sim1)
# empirical and theoretical variograms
plot(sim1)
## alternative way
plot(variog(sim1, max.dist=1))
lines.variomodel(sim1)
#
# a "smallish" simulation
sim2 <- grf(441, grid = "reg", cov.pars = c(1, .25))
image(sim2)
## alternative way
plot(variog(sim1, max.dist=1))
lines.variomodel(sim1)
#
# a "smallish" simulation
sim2 <- grf(441, grid = "reg", cov.pars = c(1, .25))
image(sim2)
##
## 1-D simulations using the same seed and different noise/signal ratios
##
set.seed(234)
sim11 <- grf(100, ny=1, cov.pars=c(1, 0.25), nug=0)
set.seed(234)
sim12 <- grf(100, ny=1, cov.pars=c(0.75, 0.25), nug=0.25)
set.seed(234)
sim13 <- grf(100, ny=1, cov.pars=c(0.5, 0.25), nug=0.5)
##
par.ori <- par(no.readonly = TRUE)
par(mfrow=c(3,1), mar=c(3,3,.5,.5))
yl <- range(c(sim11$data, sim12$data, sim13$data))
image(sim11, type="l", ylim=yl)
image(sim12, type="l", ylim=yl)
image(sim13, type="l", ylim=yl)
par(par.ori)
## simulating within borders
data(parana)
pr1 <- grf(100, cov.pars=c(200, 40), borders=parana$borders, mean=500)
points(pr1)
pr1 <- grf(100, grid="reg", cov.pars=c(200, 40), borders=parana$borders)
points(pr1)
pr1 <- grf(100, grid="reg", nx=10, ny=5, cov.pars=c(200, 40), borders=parana$borders)
points(pr1)
# Create grid
n <- 10
x <- seq(0, 1, length.out = n)
y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)
# Compute distance matrix
d <- rdist(grid, grid)
# Exponential covariance
sigma2 <- 1
range <- 0.2
cov_mat <- sigma2 * exp(-d / range)
# Simulate field
set.seed(42)
z <- mvrnorm(1, mu = rep(0, nrow(grid)), Sigma = cov_mat)
# Reshape to matrix
z_mat <- matrix(z, nrow = n)
# Plot with plot3D
persp3D(
x = x, y = y, z = z_mat,
colvar = z_mat,
col = terrain.colors(100),
theta = 45, phi = 25,
expand = 0.5,
shade = 0.6,
ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z",
main = "Static 3D Gaussian Random Field"
)
# Create grid
n <- 20
x <- seq(0, 1, length.out = n)
y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)
# Compute distance matrix
d <- rdist(grid, grid)
# Exponential covariance
sigma2 <- 1
range <- 0.2
cov_mat <- sigma2 * exp(-d / range)
# Simulate field
set.seed(42)
z <- mvrnorm(1, mu = rep(0, nrow(grid)), Sigma = cov_mat)
# Reshape to matrix
z_mat <- matrix(z, nrow = n)
# Plot with plot3D
persp3D(
x = x, y = y, z = z_mat,
colvar = z_mat,
col = terrain.colors(100),
theta = 45, phi = 25,
expand = 0.5,
shade = 0.6,
ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z",
main = "Static 3D Gaussian Random Field"
)
library(MASS)
library(fields)
library(akima)
library(MASS)
library(fields)
library(akima)
install.packages("akima")
library(MASS)
library(fields)
library(akima)
library(plot3D)
# Set up coarse grid
n <- 25
x <- seq(0, 1, length.out = n)
y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)
# Distance matrix
d <- rdist(grid, grid)
# Exponential covariance
sigma2 <- 1
range <- 0.2
cov_mat <- sigma2 * exp(-d / range)
# Simulate field
set.seed(123)
z <- mvrnorm(1, mu = rep(0, nrow(grid)), Sigma = cov_mat)
# Interpolate to a fine grid (for smoothness)
interp_result <- interp(
x = grid$x,
y = grid$y,
z = z,
xo = seq(0, 1, length = 100),
yo = seq(0, 1, length = 100),
linear = FALSE
)
# Static 3D plot
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
colvar = interp_result$z,
col = viridis::viridis(100),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
xlab = "X", ylab = "Y", zlab = "Z",
main = "Smooth Gaussian Random Field"
)
# Static 3D plot
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
# colvar = interp_result$z,
col = viridis::viridis(100),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
xlab = "X", ylab = "Y", zlab = "Z",
main = "Smooth Gaussian Random Field"
)
# Static 3D plot
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
# colvar = interp_result$z,
col = viridis::viridis(100),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
xlab = "X", ylab = "Y", zlab = "Z",
colkey = FALSE,      # <- Hides the Z-axis legend
main = "Smooth Gaussian Random Field"
)
# Static 3D plot
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
# colvar = interp_result$z,
col = viridis::viridis(200),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
xlab = "X", ylab = "Y", zlab = "Z",
colkey = FALSE,      # <- Hides the Z-axis legend
main = "Smooth Gaussian Random Field"
)
# Static 3D plot
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
# colvar = interp_result$z,
col = viridis::viridis(200),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
xlab = "s1", ylab = "s2", zlab = "z",
colkey = FALSE,      # <- Hides the Z-axis legend
main = "Smooth Gaussian Random Field"
)
# Static 3D plot
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
# colvar = interp_result$z,
col = viridis::viridis(200),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
xlab = "s[1]", ylab = "s[2]", zlab = "z",
colkey = FALSE,      # <- Hides the Z-axis legend
main = "Smooth Gaussian Random Field"
)
xlab = expression(s[1]),
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
colvar = interp_result$z,
col = viridis::viridis(100),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
colkey = FALSE,
xlab = expression(s[1]),
ylab = expression(s[2]),
zlab = "z",
main = "Smooth Gaussian Random Field"
)
# First, plot without axis labels
persp3D(
x = interp_result$x,
y = interp_result$y,
z = interp_result$z,
colvar = interp_result$z,
col = viridis::viridis(100),
theta = 40, phi = 30,
expand = 0.5,
shade = 0.8,
border = NA,
colkey = FALSE,
xlab = "", ylab = "", zlab = "",
main = "Smooth Gaussian Random Field"
)
# Then manually add plotmath labels
title(
xlab = expression(x[1]),
ylab = expression(x[2]),
zlab = "Z"
)
traceback()
quarto::quarto_preview()
